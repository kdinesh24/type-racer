'use client';

import { useState, useEffect } from 'react';
import { useSocket } from '@/hooks/useSocket';
import { useRaceStore } from '@/lib/store';
// Import components directly to avoid barrel export issues
import { Button } from '@/components/ui/button';
import UsernameModal from '@/components/UsernameModal';
import RoomModal from '@/components/RoomModal';
import RaceStatus from '@/components/RaceStatus';
import TypingArea from '@/components/TypingArea';
import PlayersList from '@/components/PlayersList';
import RaceResults from '@/components/RaceResults';
import ConnectionStatus from '@/components/ConnectionStatus';
import PracticeMode from '@/components/PracticeMode';
import { FiZap, FiTarget, FiUsers } from 'react-icons/fi';

export default function Home() {
  const [showUsernameModal, setShowUsernameModal] = useState(false);
  const [showRoomModal, setShowRoomModal] = useState(false);
  const [practiceMode, setPracticeMode] = useState(false);
  const [gameMode, setGameMode] = useState<'global' | 'private' | null>(null);
  const { username, raceId, isConnected, joinRace, createPrivateRoom, joinPrivateRoom, isPrivateRoom } = useRaceStore();
  
  // Initialize socket connection
  useSocket();

  // Prevent navigation to incorrect URLs
  useEffect(() => {
    // Handle browser navigation (back/forward buttons)
    const handlePopState = (e: PopStateEvent) => {
      e.preventDefault();
      // Force stay on current page and reset to main menu
      if (practiceMode) {
        setPracticeMode(false);
      }
      if (raceId) {
        // Handle race exit properly
        const store = useRaceStore.getState();
        store.leaveRace();
      }
      
      // Ensure we stay on the correct URL
      const currentUrl = new URL(window.location.href);
      const correctUrl = `${currentUrl.protocol}//${currentUrl.hostname}:${currentUrl.port || '3000'}${currentUrl.pathname}`;
      window.history.pushState(null, '', correctUrl);
    };

    // Check if we're on the wrong port and redirect to correct one
    const ensureCorrectPort = () => {
      if (typeof window !== 'undefined') {
        const currentUrl = new URL(window.location.href);
        // If we're on port 5173 (Vite) or any wrong port, redirect to 3000 (Next.js)
        if (currentUrl.port === '5173' || (currentUrl.port !== '3000' && currentUrl.port !== '')) {
          const correctUrl = `${currentUrl.protocol}//${currentUrl.hostname}:3000${currentUrl.pathname}`;
          window.location.href = correctUrl;
          return;
        }
      }
    };

    // Run the port check immediately
    ensureCorrectPort();

    window.addEventListener('popstate', handlePopState);

    // Push initial state to prevent navigation issues
    const currentUrl = new URL(window.location.href);
    const correctUrl = `${currentUrl.protocol}//${currentUrl.hostname}:${currentUrl.port || '3000'}${currentUrl.pathname}`;
    window.history.replaceState(null, '', correctUrl);

    return () => {
      window.removeEventListener('popstate', handlePopState);
    };
  }, [practiceMode, raceId]);

  const handleGlobalRace = () => {
    if (username) {
      joinRace(); // Join global race directly
    } else {
      setGameMode('global');
      setShowUsernameModal(true);
    }
  };

  const handlePrivateRoom = () => {
    if (username) {
      setShowRoomModal(true);
    } else {
      setGameMode('private');
      setShowUsernameModal(true);
    }
  };

  const handleUsernameSubmit = () => {
    setShowUsernameModal(false);
    if (gameMode === 'global') {
      joinRace(); // Join global race after username set
    } else if (gameMode === 'private') {
      setShowRoomModal(true);
    }
  };

  const handleCreateRoom = () => {
    createPrivateRoom(); // Use store action to create private room
    setShowRoomModal(false);
  };

  const handleJoinRoom = (code: string) => {
    joinPrivateRoom(code); // Use store action to join private room
    setShowRoomModal(false);
  };

  const handlePracticeModeExit = () => {
    setPracticeMode(false);
    setGameMode(null);
    
    // Ensure we stay on the current page and prevent any navigation issues
    if (typeof window !== 'undefined') {
      const currentUrl = new URL(window.location.href);
      const correctUrl = `${currentUrl.protocol}//${currentUrl.hostname}:${currentUrl.port || '3000'}${currentUrl.pathname}`;
      
      // Force replace the current state with the correct URL
      window.history.replaceState(null, '', correctUrl);
      
      // Double-check we're on the right URL
      if (window.location.href !== correctUrl) {
        window.location.href = correctUrl;
      }
    }
  };

  return (
    <div className="min-h-screen relative overflow-hidden bg-enhanced bg-desktop-fallback">
      {/* Dotted Grid Background */}
      <div className="dotted-grid-background"></div>
      
      {/* Enhanced Background Overlay with Gradient */}
      <div className="absolute inset-0 bg-gradient-to-br from-gray-50/50 via-white to-gray-50/50"></div>
      <div className="absolute inset-0 bg-gradient-to-t from-gray-100/30 via-transparent to-gray-50/20"></div>
      
      {/* Dotted Grid Overlay */}
      <div className="dotted-grid-overlay"></div>
      
      {/* Header */}
      <header className="relative z-50 px-4 sm:px-6 lg:px-8">
        <div className="premium-navbar">
          <div className="flex items-center justify-between h-12">
            <div className="flex items-center gap-3">
              <div className="relative">
                <div className="w-8 h-8 bg-gradient-to-br from-gray-200 to-gray-100 rounded-xl flex items-center justify-center shadow-lg backdrop-blur-sm border border-gray-200">
                  <FiZap className="w-5 h-5 text-gray-700" />
                </div>
                <div className="absolute -top-0.5 -right-0.5 w-2.5 h-2.5 bg-gradient-to-r from-blue-400 to-blue-600 rounded-full animate-pulse"></div>
              </div>
              <div>
                <h1 className="text-lg font-bold text-gray-800 text-clean font-display">
                  TypeRace
                </h1>
                <p className="text-xs text-gray-600 text-subtle font-body">
                  Competitive Typing
                </p>
              </div>
            </div>
            
            <div className="flex items-center gap-3">
              {username && (
                <div className="hidden sm:flex items-center gap-2 px-3 py-1.5 bg-gray-100 rounded-full backdrop-blur-sm border border-gray-200">
                  <div className="w-1.5 h-1.5 bg-green-400 rounded-full animate-pulse"></div>
                  <span className="text-sm text-gray-700 text-subtle font-body">
                    {username}
                  </span>
                </div>
              )}
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="relative z-10 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {practiceMode ? (
          <PracticeMode onExit={handlePracticeModeExit} />
        ) : !raceId ? (
          <div className="max-w-6xl mx-auto">
            {/* Hero Section */}
            <div className="text-center py-16">
              <div className="w-20 h-20 bg-gray-100 backdrop-blur-sm rounded-3xl flex items-center justify-center mx-auto mb-8 shadow-2xl floating-animation border border-gray-200">
                <FiZap className="w-10 h-10 text-gray-700" />
              </div>
              <h1 className="heading-primary font-display text-gray-800 mb-6 text-clean tracking-tight">
                Welcome to TypeRace
              </h1>
              <p className="text-xl md:text-2xl font-body text-gray-600 mb-12 max-w-3xl mx-auto leading-relaxed text-subtle">
                Master your typing skills with practice sessions or compete with players worldwide in real-time races
              </p>
            </div>

            {/* Game Mode Cards */}
            <div className="grid md:grid-cols-3 gap-8 mb-16">
              {/* Practice Mode Card */}
              <div className="group perfect-glass-card rounded-3xl p-8 border border-gray-200 hover:border-gray-300">
                <div className="w-16 h-16 bg-gray-100 backdrop-blur-sm rounded-2xl flex items-center justify-center mb-6 group-hover:scale-110 transition-transform duration-300 shadow-lg border border-gray-200">
                  <FiTarget className="w-8 h-8 text-gray-700" />
                </div>
                <h3 className="heading-tertiary font-display text-gray-800 mb-4 text-clean tracking-tight">Practice Mode</h3>
                <p className="text-gray-600 mb-8 leading-relaxed text-subtle font-body">
                  Perfect your typing with solo practice sessions. Track your progress and improve at your own pace.
                </p>
                <Button
                  onClick={() => setPracticeMode(true)}
                  className="flex items-center gap-2"
                >
                  <FiTarget className="w-5 h-5" />
                  Start Practice
                </Button>
              </div>

              {/* Global Race Card */}
              <div className="group perfect-glass-card rounded-3xl p-8 border border-gray-200 hover:border-gray-300">
                <div className="w-16 h-16 bg-gray-100 backdrop-blur-sm rounded-2xl flex items-center justify-center mb-6 group-hover:scale-110 transition-transform duration-300 shadow-lg border border-gray-200">
                  <FiZap className="w-8 h-8 text-gray-700" />
                </div>
                <h3 className="heading-tertiary font-display text-gray-800 mb-4 text-clean tracking-tight">Global Race</h3>
                <p className="text-gray-600 mb-8 leading-relaxed text-subtle font-body">
                  Join random players worldwide in fast-paced typing races. Up to 5 players per race.
                </p>
                <Button
                  onClick={handleGlobalRace}
                  className="flex items-center gap-2"
                >
                  <FiZap className="w-5 h-5" />
                  Join Global Race
                </Button>
              </div>

              {/* Private Room Card */}
              <div className="group perfect-glass-card rounded-3xl p-8 border border-gray-200 hover:border-gray-300">
                <div className="w-16 h-16 bg-gray-100 backdrop-blur-sm rounded-2xl flex items-center justify-center mb-6 group-hover:scale-110 transition-transform duration-300 shadow-lg border border-gray-200">
                  <FiUsers className="w-8 h-8 text-gray-700" />
                </div>
                <h3 className="heading-tertiary font-display text-gray-800 mb-4 text-clean tracking-tight">Private Room</h3>
                <p className="text-gray-600 mb-8 leading-relaxed text-subtle font-body">
                  Create or join private rooms to race with friends. Share room codes and compete together.
                </p>
                <Button
                  onClick={handlePrivateRoom}
                  className="flex items-center gap-2"
                >
                  <FiUsers className="w-5 h-5" />
                  Create/Join Room
                </Button>
              </div>
            </div>

            {/* Features Section */}
            <div className="perfect-glass-card rounded-3xl p-10 border border-gray-200 shadow-2xl">
              <h2 className="heading-secondary font-display text-gray-800 text-center mb-10 text-clean tracking-tight">
                Why Choose TypeRace?
              </h2>
              <div className="grid md:grid-cols-3 gap-10">
                <div className="text-center">
                  <div className="w-14 h-14 bg-gray-100 backdrop-blur-sm rounded-2xl flex items-center justify-center mx-auto mb-6 border border-gray-200 shadow-lg">
                    <FiTarget className="w-7 h-7 text-gray-700" />
                  </div>
                  <h3 className="font-bold text-gray-800 mb-3 text-lg text-clean tracking-tight font-display">Real-time Stats</h3>
                  <p className="text-gray-600 text-subtle font-body">
                    Track WPM, accuracy, and consistency with live performance metrics
                  </p>
                </div>
                <div className="text-center">
                  <div className="w-14 h-14 bg-gray-100 backdrop-blur-sm rounded-2xl flex items-center justify-center mx-auto mb-6 border border-gray-200 shadow-lg">
                    <FiZap className="w-7 h-7 text-gray-700" />
                  </div>
                  <h3 className="font-bold text-gray-800 mb-3 text-lg text-clean tracking-tight font-display">Instant Matches</h3>
                  <p className="text-gray-600 text-subtle font-body">
                    Quick matchmaking with players of similar skill levels worldwide
                  </p>
                </div>
                <div className="text-center">
                  <div className="w-14 h-14 bg-gray-100 backdrop-blur-sm rounded-2xl flex items-center justify-center mx-auto mb-6 border border-gray-200 shadow-lg">
                    <FiUsers className="w-7 h-7 text-gray-700" />
                  </div>
                  <h3 className="font-bold text-gray-800 mb-3 text-lg text-clean tracking-tight font-display">Play with Friends</h3>
                  <p className="text-gray-600 text-subtle font-body">
                    Create private rooms and challenge your friends to typing duels
                  </p>
                </div>
              </div>
            </div>
          </div>
        ) : (
          <div className="grid lg:grid-cols-3 gap-8">
            {/* Main Racing Area */}
            <div className="lg:col-span-2 space-y-6">
              <div className="glass-morphism rounded-2xl p-6 border border-gray-200 shadow-xl">
                <RaceStatus />
              </div>
              <div className="glass-morphism rounded-2xl p-6 border border-gray-200 shadow-xl">
                <TypingArea />
              </div>
            </div>

            {/* Sidebar */}
            <div className="space-y-6">
              <div className="glass-morphism rounded-2xl p-6 border border-gray-200 shadow-xl">
                <PlayersList />
              </div>
            </div>
          </div>
        )}
      </main>

      {/* Modals with glass effect */}
      <div className="relative z-50">
        <UsernameModal 
          isOpen={showUsernameModal} 
          onClose={() => setShowUsernameModal(false)}
          onSuccess={handleUsernameSubmit}
        />
        <RoomModal
          isOpen={showRoomModal}
          onClose={() => setShowRoomModal(false)}
          onCreateRoom={handleCreateRoom}
          onJoinRoom={handleJoinRoom}
          currentRoomCode={isPrivateRoom && raceId ? raceId : undefined}
        />
        <RaceResults />
        <ConnectionStatus isConnected={isConnected} />
      </div>

      {/* Footer */}
      <footer className="relative z-10 border-t border-gray-200">
        <div className="glass-morphism">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
            <div className="text-center text-sm text-gray-600 text-subtle">
              <p>© 2025 TypeRace. Built with Next.js, TypeScript, and Socket.io</p>
            </div>
          </div>
        </div>
      </footer>
    </div>
  );
}
